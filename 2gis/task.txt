1. Спроектировать базу данных, в которой хранится следующая информация.
Городов, улиц и организаций потенциально очень много.
•	Города. Город обязательно имеет уникальный идентификатор, название, площадь и численность населения.
•	Улицы. Улица обязательно имеет уникальный идентификатор, название и протяженность.
•	Организации. Организация обязательно имеет уникальный идентификатор, название, привязку к городу, привязку к улице, номер дома, сферу деятельности (для простоты предполагать, что она одна, например кафе или парикмахерская). Опционально может иметь несколько телефонов и адрес веб-сайта. Также организация имеет дату и время последнего обновления или вставки в базу.

2. Реализовать веб-сервис, работающий с базой данных.
PostgreSQL, не использовать ORM. Набор методов API, их названия, параметры и возможные сообщения об ошибках определяет разработчик на основании требований:
•	Иметь возможность получить список всех городов, получить информацию о городе по идентификатору, добавить или обновить информацию о городе (по идентификатору).
•	Иметь возможность получить список всех улиц, получить информацию об  улице по идентификатору, добавить или обновить информацию об улице (по идентификатору).
•	Иметь возможность получить список всех организаций, получить информацию об организации по идентификатору или названию организации (имеются организации с одинаковыми названиями), добавить или обновить информацию об  организации.
•	Должна быть возможность массового добавления любого из объектов (город, улица, организация).
•	Должна быть возможность получить все организации, добавленные или отредактированные после заданной даты-времени. В этом случае предполагается, что где-то сбоку есть клиент, который периодически опрашивает сервис на предмет изменений в организациях. При получении ответа он запоминает максимальную дату обновления/вставки и в следующий раз будет запрашивать с неё, так что обновления не должны теряться.
•	Редактировать/добавлять/читать информацию могут одновременно несколько клиентов.

3. Написать клиентскую библиотеку.
Библиотека должна работать с сервисом, реализованным в п2 и решать задачи, приведённые ниже. Можно расширять API, особенно если это выглядит логичным и способствует лучшему быстродействию.
•	Продакт-менеджер Иннокентий решил улучшить поиск в 2ГИС, научив сервис давать ответ на вопрос: “Поесть на Ленина” или “Постричься в Новосибирске”. В качестве MVP (minimum viable product) он попросил выдавать список организаций по названию, сфере деятельности и типу геолокации.
•	В компанию 2ГИС обратилась одна известная сеть фаст-фуда, желающая проанализировать города, потенциально подходящие для открытия новых филиалов сети. Они хотят узнать о том, какие уже есть организации-конкуренты в городах, удовлетворяющих их условиям.
•	Власти одного города решили сделать какую-нибудь улицу пешеходной, при этом протяженность улицы не должна быть меньше 500 метров и не должна превышать километр. При этом хочется, чтобы на этой улице была какая-то инфраструктура, чтобы пешеходам было, чем заняться. Чиновники полагают, что людям могут быть интересны бары, кафе, рестораны, музеи, кинотеатры и стриптиз-клубы. Мэр города обратился в компанию 2ГИС с просьбой предоставить им улицы, удовлетворяющие их условиям и набор организаций, на этих улицах..