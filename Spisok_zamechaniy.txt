pom.xml
	разные версии spring зависимостей
	лучше перечислять родственные зависимости рядом
	
*.hbm.xml
	лучше явно указывать тип колонок
	лучше, чтобы названия таблиц и классов совпадали
	 <key><column name="user_id"/></key> можно написать как <key column="user_id"/>
	пока не делаете маппинг с помощью аннотаций?
	лучше избегать названий с префиксами my, your и тд, просто cars будет вполне достаточно
	почему используется bag, а не list? bag - неупорядоченная коллекция, насколько помню. В java коде используется List
	
models/*.java
	метод должен называться equals. Если пользуешься средой разработки, то там есть автоматическая генерация equals и hashcode
	если переопределяется метод equals, то обязательно (!) нужно переопределить hashcode
	User.getName() - геттеры не должны заниматься проверкой на null, должны только возвращать значения поля
	От System.out.println нужно будет отказаться, когда освоите логгирование
	Можно выделять абстрактный базовый класс, например, BaseModel, у которого есть поле id, а все остальные от него наследуются
	
controllers/*.java
	первый раз вижу, что используют @GetMapping, @PostMapping, но в принципе ок
	viewName можно указывать сразу в конструкторе ModelAndView
	аннотация @ResponseBody точно нужна? Разве без неё не будет работать? Насколько я помню, она нужна если мы возвращаем не ModelAndView в методе...
	
Общее:
	В интерфейсах модификатор public при объявлении методов можно опускать
	А что за метод UserService.IsRegistred который всегда возвращает true? Названия методов по конвенции должны быть с маленькой буквы.
	Аналогично класс CarServiceImpl.IsRegistred, также несколько лишних ';'. Можно использовать code formatting tool, которая есть в средах разработки

dao/*.java
	Если строка используется один раз, то необязательно выносить её в константу. Но, на твоё усмотрение, в принципе, по желанию
	Если выносишь строки в константы, то надо объявлять их как константы: private static final String ...
	Почему CarsDaoJdbcBasedImpl.findAll не делает запрос в базу?
	Нужно убрать лишние комментарии: //language=SQL
	Для каких целей в UsersDaoJdbcBasedImpl используется одновременно SessionFactory(hibernate и JdbcTemplate?
	save, update, delete -  убрать if и делать так: return template.update(...) > 0;
	UsersDaoJdbcBasedImpl.getUserCars - можно обойтись двумя строчками: User user=find(id);return user.getMycars()
	Проверить, нужно ли делать sessionFactory.getCurrentSession(), а не sessionFactory.openSession() каждый раз при новом запросе
	CarsDaoJdbcBasedImpl.carRowMapper используется один раз, можно не выносить в качестве поля, а использовать там, где используется
	
config/*.java
	Для небольших тестовых проектов можно использовать inmemory databases, наподобие h2. Тогда не придётся отдельно скачивать и устанавливать базу данных
	
	 
	